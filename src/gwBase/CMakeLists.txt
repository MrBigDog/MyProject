IF   (DYNAMIC_GWEARTH)
    ADD_DEFINITIONS(-DGWBASE_LIBRARY)
ELSE (DYNAMIC_GWEARTH)
    ADD_DEFINITIONS(-DGWBASE_LIBRARY_STATIC)
ENDIF(DYNAMIC_GWEARTH)

IF(WIN32)
    IF(MSVC)
        SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:MSVCRT")
    ENDIF(MSVC)
ENDIF(WIN32)

SET(LIB_NAME "gwBase")

SET(HEADER_PATH ${PROJECT_SOURCE_DIR}/include/${LIB_NAME})
INCLUDE_DIRECTORIES(AFTER ${OSG_INCLUDE_DIR})
INCLUDE_DIRECTORIES(AFTER ${OSGEARTH_INCLUDE_DIR})

SET(LIB_PUBLIC_HEADERS
		CacheMgr.h
		Callback.h
		CommandMgr.h
		#Compiler.h
		Dir.h
		Math.h
		EasingFunctions.h
		EventMgr.h
		Exception.h
		Export.h
		Guard.h
		Gzfstream.h
		LogStream.h
		MakeNew.h
		md5.h
		Path.h
		PerformMonitor.h
		PlatformVersionhelpers.h
		PropertyInterpolationMgr.h
		PropertyInterpolator.h
		Props.h
		Queue.h
		SmpleStatistic.h
		StopWatch.h
		Stream.h
		StringUtils.h
		Thread.h
		TypesDef.h
		SubsystemMgr.h		
)
SET(TARGET_SRC
		md5.c
		CommandMgr.cpp
		Dir.cpp
		EventMgr.cpp
		Exception.cpp
		Gzfstream.cpp
		LogStream.cpp
		Path.cpp
		Props.cpp
		SubsystemMgr.cpp
		PerformMonitor.cpp
		SmpleStatistic.cpp
		Stream.cpp
		StringUtils.cpp
		Thread.cpp
		EasingFunctions.cpp
		PropertyInterpolator.cpp
		PropertyInterpolationMgr.cpp
		CacheMgr.cpp
)

ADD_LIBRARY(
    ${LIB_NAME} ${GWEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
    ${LIB_PUBLIC_HEADERS}
    ${TARGET_SRC} )
	
INCLUDE_DIRECTORIES(${GWEARTH_SOURCE_DIR}/Src ${OSG_INCLUDE_DIR} ${OSGEARTH_INCLUDE_DIR} ${Boost_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} )

#IF (WIN32)
#  LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
#ELSE(WIN32)
#  LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
#ENDIF(WIN32)

#OPTION(NRL_STATIC_LIBRARIES "Link osgEarth against static GDAL and cURL, including static OpenSSL, Proj4, JPEG, PNG, and TIFF." OFF)
#if(NOT NRL_STATIC_LIBRARIES)
#  LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY ZLIB_LIBRARIES)
#else(NOT NRL_STATIC_LIBRARIES)
#  LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY OSGUTIL_LIBRARY OSGSIM_LIBRARY OSGTERRAIN_LIBRARY OSGDB_LIBRARY OSGFX_LIBRARY OSGVIEWER_LIBRARY OSGTEXT_LIBRARY OSGGA_LIBRARY OSGSHADOW_LIBRARY OPENTHREADS_LIBRARY CURL_LIBRARY GDAL_LIBRARY ZLIB_LIBRARIES OSGMANIPULATOR_LIBRARY SSL_EAY_RELEASE LIB_EAY_RELEASE TIFF_LIBRARY PROJ4_LIBRARY PNG_LIBRARY JPEG_LIBRARY)
#endif(NOT NRL_STATIC_LIBRARIES)

LINK_WITH_VARIABLES(${LIB_NAME} 
								OSG_LIBRARY 
								OSGVIEWER_LIBRARY
								OPENTHREADS_LIBRARY
								OSGEARTH_LIBRARY
								ZLIB_LIBRARIES
								)
 
LINK_INTERNAL(${LIB_NAME} shlwapi)
#LINK_CORELIB_DEFAULT(${LIB_NAME} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})

INCLUDE(ModuleInstall OPTIONAL)